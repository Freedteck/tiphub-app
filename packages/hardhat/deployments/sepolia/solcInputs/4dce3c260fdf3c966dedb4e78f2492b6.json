{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "contracts/TipHub.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title TipHub - Developer Resource Sharing Platform MVP\ncontract TipHub {\n    /// @notice Resource structure for shared content\n    struct Resource {\n        address contributor;    // Creator of the resource\n        string contentHash;     // IPFS/content identifier\n        uint256 tipsReceived;   // Total USDe tips received\n        uint256 createdAt;      // Timestamp of resource creation\n        uint256 viewCount;      // Number of times resource viewed\n    }\n\n    /// @notice Stores all resources\n    Resource[] public resources;\n\n    /// @notice Tracks resources per user\n    mapping(address => uint256[]) public userResources;\n\n    /// @notice Tracks total tips received by each contributor\n    mapping(address => uint256) public totalTipsReceived;\n\n    /// @notice USDe token contract interface\n    IERC20 public immutable usdeToken;\n\n    /// @notice Platform purchase link for USDe\n    string public constant USDE_PURCHASE_LINK = \"https://app.sommelier.finance/\";\n\n    /// @notice Minimum tip amount\n    uint256 public constant MIN_TIP_AMOUNT = 0.1 * 10**18; // 0.1 USDe\n\n    /// @notice Events for platform interactions\n    event ResourceShared(\n        uint256 indexed resourceId, \n        address indexed contributor, \n        string contentHash\n    );\n\n    event ResourceTipped(\n        uint256 indexed resourceId,\n        address indexed tipper,\n        address indexed contributor,\n        uint256 tipAmount\n    );\n\n    event ResourceViewed(\n        uint256 indexed resourceId,\n        address indexed viewer\n    );\n\n    /// @notice Constructor sets the USDe token address\n    /// @param _usdeTokenAddress Address of the USDe token contract\n    constructor(address _usdeTokenAddress) {\n        require(_usdeTokenAddress != address(0), \"Invalid USDe token address\");\n        usdeToken = IERC20(_usdeTokenAddress);\n    }\n\n    /// @notice Share a new developer resource\n    /// @param _contentHash IPFS hash or content identifier\n    function shareResource(string calldata _contentHash) external {\n        require(bytes(_contentHash).length > 0, \"Content hash cannot be empty\");\n\n        // Create new resource\n        resources.push(Resource({\n            contributor: msg.sender,\n            contentHash: _contentHash,\n            tipsReceived: 0,\n            createdAt: block.timestamp,\n            viewCount: 0\n        }));\n\n        // Track user's resources\n        uint256 newResourceId = resources.length - 1;\n        userResources[msg.sender].push(newResourceId);\n\n        emit ResourceShared(newResourceId, msg.sender, _contentHash);\n    }\n\n    /// @notice Tip a resource using USDe\n    /// @param _resourceId ID of the resource to tip\n    /// @param _amount Amount of USDe to tip\n    function tipResource(uint256 _resourceId, uint256 _amount) external {\n        require(_resourceId < resources.length, \"Invalid resource ID\");\n        Resource storage resource = resources[_resourceId];\n        \n        require(resource.contributor != msg.sender, \"Cannot tip own resource\");\n        require(_amount >= MIN_TIP_AMOUNT, \"Tip amount too low\");\n\n        // Transfer USDe from tipper to resource contributor\n        require(\n            usdeToken.transferFrom(msg.sender, resource.contributor, _amount),\n            \"USDe transfer failed\"\n        );\n\n        // Update tip tracking\n        resource.tipsReceived += _amount;\n        totalTipsReceived[resource.contributor] += _amount;\n\n        emit ResourceTipped(_resourceId, msg.sender, resource.contributor, _amount);\n    }\n\n    /// @notice Record a resource view\n    /// @param _resourceId ID of the resource viewed\n    function viewResource(uint256 _resourceId) external {\n        require(_resourceId < resources.length, \"Invalid resource ID\");\n        Resource storage resource = resources[_resourceId];\n        resource.viewCount++;\n\n        emit ResourceViewed(_resourceId, msg.sender);\n    }\n\n    /// @notice Retrieve purchase link for USDe\n    /// @return Link to purchase USDe tokens\n    function getUSDePurchaseLink() external pure returns (string memory) {\n        return USDE_PURCHASE_LINK;\n    }\n\n    /// @notice Retrieve all resources shared by a user\n    /// @param _user Address of the user\n    /// @return Array of resource IDs\n    function getUserResources(address _user) external view returns (uint256[] memory) {\n        return userResources[_user];\n    }\n\n    /// @notice Get top contributors based on tips received\n    /// @param _limit Number of top contributors to return\n    /// @return contributors Array of top contributor addresses\n    /// @return tips Corresponding array of total tips received\n    function getTopContributors(uint8 _limit) external view returns (\n        address[] memory contributors,\n        uint256[] memory tips\n    ) {\n        uint256 limit = _limit > 100 ? 100 : _limit;\n        contributors = new address[](limit);\n        tips = new uint256[](limit);\n\n        // Simple selection of top contributors\n        for (uint256 i = 0; i < resources.length; i++) {\n            address contributor = resources[i].contributor;\n            uint256 contributorTips = totalTipsReceived[contributor];\n\n            // Find placement in top contributors\n            for (uint256 j = 0; j < limit; j++) {\n                if (tips[j] < contributorTips) {\n                    // Shift existing entries\n                    for (uint256 k = limit - 1; k > j; k--) {\n                        tips[k] = tips[k-1];\n                        contributors[k] = contributors[k-1];\n                    }\n                    \n                    // Insert new top contributor\n                    tips[j] = contributorTips;\n                    contributors[j] = contributor;\n                    break;\n                }\n            }\n        }\n    }\n\n    /// @notice Get total number of resources on the platform\n    function getTotalResources() external view returns (uint256) {\n        return resources.length;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}